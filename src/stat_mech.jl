using LinearAlgebra: Diagonal, eigen

export fermi_dirac, electronic_energy, electronic_entropy

function fermi_dirac(Œµ, Œº, Œ≤)
    Œ∑ = exp((Œµ - Œº) * Œ≤)
    return inv(oneunit(Œ∑) + Œ∑)
end
fermi_dirac(ùêá::AbstractMatrix, Œº, Œ≤) = matrix_function(Œµ -> fermi_dirac(Œµ, Œº, Œ≤), ùêá)

function fermi_dirac_prime(Œµ, Œº, Œ≤)
    fd = fermi_dirac(Œµ, Œº, Œ≤)
    return -Œ≤ * fd * (oneunit(fd) - fd)
end

function electronic_energy(Œµ, Œº, Œ≤)
    Œ∑ = (Œµ - Œº) * Œ≤
    if Œ∑ > -20oneunit(Œ∑)
        return -inv(Œ≤) * log1p(exp(-Œ∑))  # `log1p(x)` is accurate for `x` near zero
    else
        return -inv(Œ≤) * (log1p(exp(Œ∑)) - Œ∑)  # Avoid overflow for very negative `Œ∑`
    end
end

electronic_entropy(Œµ, Œº, Œ≤) =
    (fermi_dirac(Œµ, Œº, Œ≤) * (Œµ - Œº) - electronic_energy(Œµ, Œº, Œ≤)) * Œ≤

"""
    matrix_function(f, A)

Compute the matrix function `f(A)` for a square matrix `A` using the eigenvalue decomposition method.

The function computes `f(A)` by diagonalizing `A`, applying the scalar function `f` to the eigenvalues,
and then reconstructing the matrix. Specifically, it performs the following steps:
1. Compute the eigenvalue decomposition of `A` as `A = V * D * V‚Åª¬π`, where `D` is a diagonal matrix of
   eigenvalues and `V` is the matrix of eigenvectors.
2. Apply the function `f` element-wise to the eigenvalues in `D`.
3. Reconstruct the matrix as `f(A) = V * Diagonal(f(D)) * V‚Åª¬π`.
"""
function matrix_function(f, A)
    E = eigen(A)
    Œõ, V = E.values, E.vectors
    return V * Diagonal(f.(Œõ)) * inv(V)  # `Diagonal` is faster than `diagm`
end
