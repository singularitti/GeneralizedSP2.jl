using GershgorinDiscs: eigvals_extrema
using LinearAlgebra: I, Diagonal, eigen, eigvals
using IsApprox: isunitary

export fermi_dirac,
    rescaled_fermi_dirac,
    electronic_energy,
    electronic_entropy,
    occupations,
    rescale_mu,
    rescale_beta,
    rescale_zero_one,
    rescale_one_zero

function fermi_dirac(Œµ, Œº, Œ≤)
    Œ∑ = exp((Œµ - Œº) * Œ≤)
    return inv(oneunit(Œ∑) + Œ∑)
end
fermi_dirac(H::AbstractMatrix, Œº, Œ≤) = matrix_function(Œµ -> fermi_dirac(Œµ, Œº, Œ≤), H)

# function rescaled_fermi_dirac(H::AbstractMatrix, Œº, Œ≤, ùõÜ=eigvals_extrema(H))
#     Œº‚Ä≤ = rescale_mu(Œº, ùõÜ)
#     Œ≤‚Ä≤ = rescale_beta(Œ≤, ùõÜ)
#     H‚Ä≤ = H - Œº‚Ä≤ * I
#     Œ∑ = exp(H‚Ä≤ * Œ≤‚Ä≤)
#     return inv(oneunit(Œ∑) + Œ∑)
# end
function rescaled_fermi_dirac(H::AbstractMatrix, Œº, Œ≤, ùõÜ=eigvals_extrema(H))
    Œº‚Ä≤ = rescale_mu(Œº, ùõÜ)
    Œ≤‚Ä≤ = rescale_beta(Œ≤, ùõÜ)
    f = rescale_one_zero(ùõÜ)
    return matrix_function(H) do Œµ
        Œµ‚Ä≤ = f(Œµ)
        fermi_dirac(Œµ‚Ä≤, Œº‚Ä≤, Œ≤‚Ä≤)
    end
end

function fermi_dirac_prime(Œµ, Œº, Œ≤)
    fd = fermi_dirac(Œµ, Œº, Œ≤)
    return -Œ≤ * fd * (oneunit(fd) - fd)
end

function electronic_energy(Œµ, Œº, Œ≤)
    Œ∑ = (Œµ - Œº) * Œ≤
    if Œ∑ > -20oneunit(Œ∑)
        return -inv(Œ≤) * log1p(exp(-Œ∑))  # `log1p(x)` is accurate for `x` near zero
    else
        return -inv(Œ≤) * (log1p(exp(Œ∑)) - Œ∑)  # Avoid overflow for very negative `Œ∑`
    end
end

electronic_entropy(Œµ, Œº, Œ≤) =
    (fermi_dirac(Œµ, Œº, Œ≤) * (Œµ - Œº) - electronic_energy(Œµ, Œº, Œ≤)) * Œ≤

occupations(dm::AbstractMatrix) = eigvals(dm)

function rescale_mu(Œº, ùõÜ)
    Œµ‚Çò·µ¢‚Çô, Œµ‚Çò‚Çê‚Çì = extrema(ùõÜ)
    @assert Œµ‚Çò‚Çê‚Çì > Œµ‚Çò·µ¢‚Çô
    @assert Œµ‚Çò·µ¢‚Çô <= Œº <= Œµ‚Çò‚Çê‚Çì "Œº must be in the range [Œµ‚Çò‚Çê‚Çì, Œµ‚Çò·µ¢‚Çô]!"
    return (Œº - Œµ‚Çò‚Çê‚Çì) / (Œµ‚Çò·µ¢‚Çô - Œµ‚Çò‚Çê‚Çì)
end

function rescale_beta(Œ≤, ùõÜ)
    Œµ‚Çò·µ¢‚Çô, Œµ‚Çò‚Çê‚Çì = extrema(ùõÜ)
    @assert Œµ‚Çò‚Çê‚Çì > Œµ‚Çò·µ¢‚Çô
    return Œ≤ * (Œµ‚Çò·µ¢‚Çô - Œµ‚Çò‚Çê‚Çì)
end

"""
    matrix_function(f, A)

Compute the matrix function `f(A)` for a square matrix `A` using the eigenvalue decomposition method.

The function computes `f(A)` by diagonalizing `A`, applying the scalar function `f` to the eigenvalues,
and then reconstructing the matrix. Specifically, it performs the following steps:
1. Compute the eigenvalue decomposition of `A` as `A = V * D * V‚Åª¬π`, where `D` is a diagonal matrix of
   eigenvalues and `V` is the matrix of eigenvectors.
2. Apply the function `f` element-wise to the eigenvalues in `D`.
3. Reconstruct the matrix as `f(A) = V * Diagonal(f(D)) * V‚Åª¬π`.
"""
function matrix_function(f, A)
    E = eigen(A)
    Œõ, V = E.values, E.vectors
    if isunitary(V)
        return V * Diagonal(f.(Œõ)) * V'
    end
    return V * Diagonal(f.(Œõ)) * inv(V)  # `Diagonal` is faster than `diagm`
end

function rescale_zero_one(ùê±)
    min, max = extrema(ùê±)
    @assert min < max
    k, b = inv(max - min), min / (min - max)
    @assert !iszero(k)

    rescaler(x::Number) = k * x + b  # `x` can be out of the range [min, max]
    rescaler(X::AbstractMatrix) = k * X + b * I  # Map `max` to 1, `min` to 0

    rescaler‚Åª¬π(y::Number) = y * (max - min) + min
    rescaler‚Åª¬π(Y::AbstractMatrix) = (Y - b * I) / k
    Base.inv(::typeof(rescaler)) = rescaler‚Åª¬π

    return rescaler
end
rescale_zero_one(ùê±...) = rescale_zero_one(ùê±)

function rescale_one_zero(ùê±)
    min, max = extrema(ùê±)
    @assert min < max
    k, b = inv(min - max), max / (max - min)
    @assert !iszero(k)

    rescaler(x::Number) = k * x + b  # `x` can be out of the range [min, max]
    rescaler(X::AbstractMatrix) = k * X + b * I  # Map `max` to 0, `min` to 1

    rescaler‚Åª¬π(y::Number) = y * (min - max) + max
    rescaler‚Åª¬π(Y::AbstractMatrix) = (Y - b * I) / k
    Base.inv(::typeof(rescaler)) = rescaler‚Åª¬π

    return rescaler
end
rescale_one_zero(ùê±...) = rescale_one_zero(ùê±)
